#!/usr/bin/env ruby

require_relative "../lib/smart_diff"
require_relative "../lib/smart_diff/htmlize"

if ARGV.size < 2
  puts "Please call SmartDiff with two ruby files."
  puts "Like: "
  puts "\t$ smart_diff example/file1.rb example/file2.rb"
  exit -1
end

file_path1 = ARGV[0]
file_path2 = ARGV[1]

puts "Creating Diff from #{file_path1} and #{file_path2}"

rd = SmartDiff.new(file_path1, file_path2)

nd = rd.node_diff.to_a

# Subdiffs use levenschtein distances to match up nodes. This won't work on
# the full diff, because it has too many chances to create false positives.
# However, within a subdiff, it can be pretty accurate because its less
# likely to have many highly similar nodes. Here's an example of using those
# subdiffs to improve the diffing results.

puts "Examining subdiffs to improve results."

# Gather up subdiffs

subs = []

nd.each do |d|
  if d.subdiff
    d.subdiff.each do |s|
      subs << s
    end
  end
end

# Go through our diff, removing any diff which matches a subdiff
# We create a few nils in the process, so we strip those out at the end

complete = nd.map do |dd|
  subs.each do |c|
    if dd.old_node && c.old_node and !dd.new_node && c.new_node
      if dd.old_node.isSame(c.old_node)
        dd.old_node = nil
      end
    elsif dd.new_node && c.new_node and !dd.old_node && c.old_node
      if dd.new_node.isSame(c.new_node)
        dd.new_node = nil
      end
    end
  end
  dd unless dd.new_node == nil && dd.old_node == nil
end

complete.compact!

# Add all the subdiffs onto the end of our list of diffs
# We need them at the end so later we can make sure we are
# not creating nested anchor tags.

subs.each do |c|
  complete << c
end


puts "Creating html output."

html = Htmlize.new
output = html.create_html(complete, file_path2, file_path1, rd.code_two, rd.code_one)

puts "Output complete. Try opening #{output} in your browser."
